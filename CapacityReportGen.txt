function startup(list){    // Use once to create the company spreadsheet, then filter will trigger each form submit
    //Creates new sheet
  if (list.length == 0){  // if there's no file by queried name
    var newSheet = SpreadsheetApp.create("newSheet");  // makes new sheet with name 'newsheet'
    var newSheetURL = newSheet.getUrl();  // fetches ^^ url
    return newSheetURL } 
  
  else {
    var rawFile = DriveApp.getFilesByName('newSheet');  // if sheet already exists, fetch file iterable
    var actualFile = []
    while (rawFile.hasNext() ){   
      var oldFile = rawFile.next(); 
      actualFile.push(oldFile); }  // takes file out of iterable and puts into empty list 
    
    var oldFile = actualFile[0];  
    var newSheetURL = oldFile.getUrl(); // fetches url from file within list
  

  return newSheetURL// In case you need to pull the URL
  }}

function searchForFile(){ //Checks that the sheet doesn't already exist
  var file = DriveApp.getFilesByName('newSheet');// fetches sheet 
  var files = []
  while (file.hasNext()){ // while there's another entry
    var actualFile = file.next();     
    files.push(actualFile);  // add file name to file list
    
 }length = files.length  
  return files ; // returns either empty list or list with file's name 
}

function clearRange1(sheetURL) { //deletes old entries
  var sheet = SpreadsheetApp.openByUrl(sheetURL); // fetches new sheet
  var range = sheet.getDataRange().clearContent(); // deletes all data in data range
  
}
function filterExcel(sheetURL) {
//Filters the original data based on company code and places those rows in new sheet
  
  //Fetch ss and its length
  var sheet = SpreadsheetApp.openById('1hiKaDP58EQIaYa-a7xRo2WGuCgUg9HCOAImgXTtx-F0');
  var range = sheet.getDataRange();  
  Logger.log(range)
  var lastRow = sheet.getLastRow();
  var response = sheet.get
  var code =  101;  //hardcoded code, need to work on getting one from the user

  
  //Fetches new sheet
  var newSheet = SpreadsheetApp.openByUrl(sheetURL);
  
  newSheet.appendRow(["Timestamp"]);
  //Logger.log(header);
  // Fetch values for each row in the Range.
  var data = range.getValues();
  var totalResponses = 0;
  //Logger.log(data) ;
  //Logger.log(length1);
  for (var i in data ) {  // iterates through
    var row = data[i];
    //Logger.log(row);
    if ( row[1] == code )     // if the code input is the same as the company code, it adds the new row to the existing spreadsheet
    {
      newSheet.appendRow(row);
      totalResponses = totalResponses + 1
      i = i + 1; 
      Logger.log(i);
    }
    else
    { 
      Logger.log('else');
      i = i + 1; 
      Logger.log('increment');
    } 

  }
   return [totalResponses,code] 

}

function columnToLetter(column)
{
  var temp, letter = '';
  while (column > 0)
  {
    temp = (column - 1) % 26;
    letter = String.fromCharCode(temp + 65) + letter;
    column = (column - temp - 1) / 26;
  }
  return letter;
}

function basicAnalytics(newSheetURL,totalResponses){  // Copies sheets formulas to new sheet where they auto-apply
  var sheet = SpreadsheetApp.openByUrl(newSheetURL); // fetch sheet and set active
  SpreadsheetApp.setActiveSpreadsheet(sheet);
  
  var lastRowIndex = sheet.getLastRow();  // gets last entry with data
  var lastdataindex = lastRowIndex.toString()
  var range = sheet.getDataRange(); // extracts data from sheet
  
  var numCols = range.getNumColumns();
  var numRows = range.getNumRows();
  
  var responses = ['']

  sheet.appendRow(responses);
  var range2 = sheet.getDataRange();
      
  //For initial questions
  var rowcount = lastRowIndex+1;
          for (var i = 2; i <= 10; i++) {
            var withString = 'Question '+(i-1).toString();
            var dataArray = [withString];
            var countArray = ["Response Count"];
            var perArray = ["Response Percent"];
            var totArray = ["Answered Question"];
            rowcount++;
            
            var colname = columnToLetter(i);
            var totresp = '=COUNTA('+ colname+ '1:'+ colname + lastdataindex+')'
            
              for (var j = 1; j <= numRows; j++) {
                var currentValue = range.getCell(j,i).getValue();
                var dup = false
                for( l in dataArray){
                  if(dataArray[l] == currentValue && currentValue !=''){
                    dup=true;
                    countArray[l]++;
                      //rowcount++;
                  }
                  
                 }
                if(dup == false && currentValue !='' ){
                    dataArray.push(currentValue);
                    countArray.push(1);
                    rowcount++;
                    
                }
                perArray.push('=B' + rowcount +'/C' + rowcount + '*100');
                
                //Logger.log(countArray[l])
                totArray.push(totresp);
              }
            
            for( h in dataArray)
            {
              sheet.appendRow([dataArray[h], countArray[h], totArray[h], perArray[h]]);
            }
            //sheet.appendRow(countArray)
            
          }    // END OF FOR LOOP 
  
  
 //For Agree/Disagree questions 
  
  sheet.appendRow(['Question',"Agree","Neither Agree or Disagree","Disagree",'Don'+"'"+'t Know','Opp','IDK']); //Headings for counts
  var rowStr = rowcount+1
      
          for (var k = 11; k <= numCols; k++) {
            
            var colname = columnToLetter(k);  //get letter for column number to use in formulas below
            //construct formulas of the format: =COUNTIF(D1:D9,"Agree")
            var Agreestr = '=COUNTIF('+ colname+ '1:'+ colname + lastdataindex +';"Agree")'
            var NAgDstr = '=COUNTIF('+ colname+ '1:'+ colname + lastdataindex +';"Neither Agree or Disagree")'
            var Disgreestr = '=COUNTIF('+ colname+ '1:'+ colname + lastdataindex +';"Disagree")'
            var DKstr = '=COUNTIF('+ colname+ '1:'+ colname + lastdataindex +';"Don'+"'"+'t Know")'
            var oppPerc = '=IFERROR(SUM(C' + rowStr + ':D' + rowStr + ')/(SUM(B' + rowStr + ':D' + rowStr + '))' + '*100,0)'
            var idkPerc = '=E' + rowStr +'/IF(SUM(B' + rowStr + ':E' + rowStr + ')=0,1,SUM(B' + rowStr + ':E' + rowStr + ')' + ')*100'
            sheet.appendRow(['Question '+(k-1),Agreestr,NAgDstr,Disgreestr,DKstr,oppPerc,idkPerc]);
            rowStr++;
          }        
  var totalQues = sheet.getLastRow() - lastRowIndex - 3
  var totalPossResp = (lastRowIndex - 1) * (totalQues)
  //var ACCEL = // =SUM(B120,B10,B55) / totalPossResp      <---- This line is for calculating the five metrics 
  
  //Sorting
  var sheetFinal = SpreadsheetApp.openByUrl(newSheetURL);
  SpreadsheetApp.setActiveSpreadsheet(sheetFinal);
  var newSheetFinal = SpreadsheetApp.getActiveSpreadsheet();
  newSheetFinal.insertSheet(); //inserts new tabs into newSheet
  SpreadsheetApp.getActiveSpreadsheet().renameActiveSheet("Sorted Opp");
  newSheetFinal.insertSheet();
  SpreadsheetApp.getActiveSpreadsheet().renameActiveSheet("Key Metrics");
  
  var colorsheet = SpreadsheetApp.getActiveSheet();
  colorsheet.getRange('A1:A21').setBackground("#0099ff");
  colorsheet.getRange('C1:C21').setBackground("#00cc00");
  SpreadsheetApp.flush();
  
    //Copies over question numbers and opportunity score values into tab1 on newSheet
  SpreadsheetApp.setActiveSpreadsheet(sheetFinal);
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var source = ss.getSheets()[0];
  var destination = ss.getSheets()[1];
  
  destination.appendRow(["Question Number","Opportunity Score"]);

  var range = source.getRange("A36:A256");
  range.copyValuesToRange(destination, 1, 1, 2, 257);
  
  SpreadsheetApp.setActiveSpreadsheet(sheetFinal);
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var source = ss.getSheets()[0];
  var destination = ss.getSheets()[1];

  var range = source.getRange("F36:F256");
  range.copyValuesToRange(destination, 2, 2, 2, 257);
  
     //Sorts by the value of the opportunity score, keeps the opportunity score and corresponding question together
     //Sorts from highest to lowest 
  var ss1 = SpreadsheetApp.getActiveSpreadsheet();
  var sheet1 = ss1.getSheets()[1];
  var range1 = sheet1.getRange("A2:B222");
  range1.sort({column: 2, ascending: false});
  
  //Top 20 and Bottom 20 Opportunity Scores
  var sheetFinal = SpreadsheetApp.openByUrl(newSheetURL);
  SpreadsheetApp.setActiveSpreadsheet(sheetFinal);
  var newSheetFinal = SpreadsheetApp.getActiveSpreadsheet();
  
     //Copies the top and bottom 20 opportunity scores and question numbers into tab2
  SpreadsheetApp.setActiveSpreadsheet(sheetFinal);
  var ss3 = SpreadsheetApp.getActiveSpreadsheet();
  var source2 = ss3.getSheets()[1];
  var destination1 = ss3.getSheets()[2];

  destination1.appendRow(["TOP OPPORTUNITIES (highest opportunity score)", "Opportunity Score", "TOP STRENGTHS (lowest opportunity score)", "Opportunity Score"]) 
  
  var range1 = source2.getRange("A2:A21");
  range1.copyValuesToRange(destination1, 1, 1, 2, 21);
  
  
  SpreadsheetApp.setActiveSpreadsheet(sheetFinal);
  var ss3 = SpreadsheetApp.getActiveSpreadsheet();
  var source2 = ss3.getSheets()[1];
  var destination1 = ss3.getSheets()[2];

  var range1 = source2.getRange("B2:B21");
  range1.copyValuesToRange(destination1, 2, 2, 2, 21);
  
  
  SpreadsheetApp.setActiveSpreadsheet(sheetFinal);
  var ss3 = SpreadsheetApp.getActiveSpreadsheet();
  var source2 = ss3.getSheets()[1];
  var destination1 = ss3.getSheets()[2];

  var range1 = source2.getRange("A203:A222");
  range1.copyValuesToRange(destination1, 3, 3, 2, 21);
  
  
  
  SpreadsheetApp.setActiveSpreadsheet(sheetFinal);
  var ss3 = SpreadsheetApp.getActiveSpreadsheet();
  var source2 = ss3.getSheets()[1];
  var destination1 = ss3.getSheets()[2];

  var range1 = source2.getRange("B203:B222");
  range1.copyValuesToRange(destination1, 4, 4, 2, 21);
  
}




  function emailNotification(code,newSheetUrl){   // Emails user a link to the new spreadsheet 
    var email = Session.getActiveUser().getEmail(); 
    var message = "A new response was logged. Here's the link for the new spreadsheet!" + newSheetUrl;
    var subject = "Company" + code + "Analytics Spreadsheet" ; 

    GmailApp.sendEmail(email, subject, message); // sends email to user
    
    
} 



function main() {    // Ties all functions together, triggers on every form submit, no email.  
  var yesOrNo = searchForFile(); // returns whether or not to make new sheet
  var newSheetURL = startup(yesOrNo) ; //makes and returns the results sheet's url
  clearRange1(newSheetURL); // deletes current entries
  var code2 =  filterExcel(newSheetURL); //re generates entries
  basicAnalytics(newSheetURL); // applies basic analytics to entries and adds


} 

function main2() {    // Ties all functions together with email notification, triggers every month 
  var yesOrNo = searchForFile(); // returns whether or not to make new sheet
  var newSheetURL = startup(yesOrNo) ; //makes and returns the results sheet's url
  clearRange1(newSheetURL); // deletes current entries
  var tuple =  filterExcel(newSheetURL); //re generates entries
  var totalResponse = tuple[0]
  var code2 = tuple[1]
  basicAnalytics(newSheetURL,totalResponse); // applies basic analytics to entries and adds
  emailNotification(code2,newSheetURL); // sends email notification to user
  
} 